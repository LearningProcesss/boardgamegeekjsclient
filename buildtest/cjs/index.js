const { BggClient } = require("boardgamegeekclient")

const client = BggClient.Create()

client.thing.query({ id: 174430, videos: 1, comments: 1, marketplace: 1, stats: 1, type: "boardgame" }).then(dtos => {
    console.log('\x1b[33m%s\x1b[0m', 'client.thing {id: 174430, videos: 1, comments: 1, marketplace: 1, stats: 1, ratingcomments: 1, type: "boardgame"}')

    const dto = dtos[0]
    console.assert(dtos.length === 1, '\x1b[31m%s\x1b[0m', 'result dtos array must count 1')
    console.assert(dto.id === 174430, '\x1b[31m%s\x1b[0m', 'id not equal')

    console.assert(dto.videos, '\x1b[31m%s\x1b[0m', 'videos not dedeserialized')
    console.assert(dto.videos.total, '\x1b[31m%s\x1b[0m', 'videos.total not dedeserialized')
    console.assert(dto.videos.items[0].id, '\x1b[31m%s\x1b[0m', 'videos.items[0].id not dedeserialized')
    console.assert(dto.videos.items[0].category, '\x1b[31m%s\x1b[0m', 'videos.items[0].category not dedeserialized')
    console.assert(dto.videos.items[0].language, '\x1b[31m%s\x1b[0m', 'videos.items[0].language not dedeserialized')
    console.assert(dto.videos.items[0].link, '\x1b[31m%s\x1b[0m', 'videos.items[0].link not dedeserialized')
    console.assert(dto.videos.items[0].postdate, '\x1b[31m%s\x1b[0m', 'videos.items[0].postdate not dedeserialized')
    console.assert(dto.videos.items[0].title, '\x1b[31m%s\x1b[0m', 'videos.items[0].title not dedeserialized')
    console.assert(dto.videos.items[0].userid, '\x1b[31m%s\x1b[0m', 'videos.items[0].userid not dedeserialized')
    console.assert(dto.videos.items[0].username, '\x1b[31m%s\x1b[0m', 'videos.items[0].username not dedeserialized')

    console.assert(dto.comments, '\x1b[31m%s\x1b[0m', 'comments not dedeserialized')
    console.assert(dto.comments.page, '\x1b[31m%s\x1b[0m', 'comments.page not dedeserialized')
    console.assert(dto.comments.totalitems, '\x1b[31m%s\x1b[0m', 'comments.totalitems not dedeserialized')
    console.assert(dto.comments.items, '\x1b[31m%s\x1b[0m', 'comments.items not dedeserialized')
    console.assert(dto.comments.items[0].rating, '\x1b[31m%s\x1b[0m', 'comments.items[0].rating not dedeserialized')
    console.assert(dto.comments.items[0].username, '\x1b[31m%s\x1b[0m', 'comments.items[0].username not dedeserialized')
    console.assert(dto.comments.items[0].value, '\x1b[31m%s\x1b[0m', 'comments.items[0].value not dedeserialized')

    console.assert(dto.marketplacelistings, '\x1b[31m%s\x1b[0m', 'marketplacelistings not deserialized')
    console.assert(dto.marketplacelistings[0].condition, '\x1b[31m%s\x1b[0m', 'marketplacelistings[0].condition not deserialized')
    console.assert(dto.marketplacelistings[0].link, '\x1b[31m%s\x1b[0m', 'marketplacelistings[0].link not deserialized')
    console.assert(dto.marketplacelistings[0].listdate, '\x1b[31m%s\x1b[0m', 'marketplacelistings[0].listdate not deserialized')
    console.assert(dto.marketplacelistings[0].notes, '\x1b[31m%s\x1b[0m', 'marketplacelistings[0].notes not deserialized')
    console.assert(dto.marketplacelistings[0].price, '\x1b[31m%s\x1b[0m', 'marketplacelistings[0].price not deserialized')

    console.assert(dto.statistics, '\x1b[31m%s\x1b[0m', 'statistics not deserialized')
    console.assert(dto.statistics.page, '\x1b[31m%s\x1b[0m', 'statistics.page not deserialized')
    console.assert(dto.statistics.ratings, '\x1b[31m%s\x1b[0m', 'statistics.ratings not deserialized')
    console.assert(dto.statistics.ratings.average, '\x1b[31m%s\x1b[0m', 'statistics.ratings.average not deserialized')
    console.assert(dto.statistics.ratings.averageweight, '\x1b[31m%s\x1b[0m', 'statistics.ratings.averageweight not deserialized')
    console.assert(dto.statistics.ratings.bayesaverage, '\x1b[31m%s\x1b[0m', 'statistics.ratings.bayesaverage not deserialized')
    console.assert(dto.statistics.ratings.median, '\x1b[31m%s\x1b[0m', 'statistics.ratings.median not deserialized')
    console.assert(dto.statistics.ratings.numcomments, '\x1b[31m%s\x1b[0m', 'statistics.ratings.numcomments not deserialized')
    console.assert(dto.statistics.ratings.numweights, '\x1b[31m%s\x1b[0m', 'statistics.ratings.numweights not deserialized')
    console.assert(dto.statistics.ratings.owned, '\x1b[31m%s\x1b[0m', 'statistics.ratings.owned not deserialized')
    console.assert(dto.statistics.ratings.ranks, '\x1b[31m%s\x1b[0m', 'statistics.ratings.ranks not deserialized')
    console.assert(dto.statistics.ratings.stddev, '\x1b[31m%s\x1b[0m', 'statistics.ratings.stddev not deserialized')
    console.assert(dto.statistics.ratings.trading, '\x1b[31m%s\x1b[0m', 'statistics.ratings.trading not deserialized')
    console.assert(dto.statistics.ratings.usersrated, '\x1b[31m%s\x1b[0m', 'statistics.ratings.usersrated not deserialized')
    console.assert(dto.statistics.ratings.wanting, '\x1b[31m%s\x1b[0m', 'statistics.ratings.wanting not deserialized')
    console.assert(dto.statistics.ratings.wishing, '\x1b[31m%s\x1b[0m', 'statistics.ratings.wishing not deserialized')
    
    console.assert(dto.description, '\x1b[31m%s\x1b[0m', `description not deserialized`)
    console.assert(dto.image, '\x1b[31m%s\x1b[0m', `image not deserialized`)
    console.assert(dto.links, '\x1b[31m%s\x1b[0m', `links not deserialized`)
    console.assert(dto.maxplayers, '\x1b[31m%s\x1b[0m', `maxplayers not deserialized`)
    console.assert(dto.maxplaytime, '\x1b[31m%s\x1b[0m', `maxplaytime not deserialized`)
    console.assert(dto.minplaytime, '\x1b[31m%s\x1b[0m', `minplaytime not deserialized`)
    console.assert(dto.name, '\x1b[31m%s\x1b[0m', `name not deserialized`)
    console.assert(dto.playingtime, '\x1b[31m%s\x1b[0m', `playingtime not deserialized`)

    console.assert(dto.polls, '\x1b[31m%s\x1b[0m', `polls not deserialized`)
    console.assert(dto.polls[0].name, '\x1b[31m%s\x1b[0m', `polls[0].name not deserialized`)
    console.assert(dto.polls[0].title, '\x1b[31m%s\x1b[0m', `polls[0].title not deserialized`)
    console.assert(dto.polls[0].totalvotes, '\x1b[31m%s\x1b[0m', `polls[0].totalvotes not deserialized`)
    console.assert(dto.polls[0].polls, '\x1b[31m%s\x1b[0m', `polls[0].polls not deserialized`)
    console.assert(dto.polls[0].polls[0].numplayers, '\x1b[31m%s\x1b[0m', `polls[0].polls[0].numplayers not deserialized`)
    console.assert(dto.polls[0].polls[0].result, '\x1b[31m%s\x1b[0m', `polls[0].polls[0].result not deserialized`)
    
    console.assert(dto.thumbnail, '\x1b[31m%s\x1b[0m', `thumbnail not deserialized`)
    console.assert(dto.type, '\x1b[31m%s\x1b[0m', `type not deserialized`)
    console.assert(dto.yearpublished, '\x1b[31m%s\x1b[0m', `yearpublished not deserialized`)
})
client.family.query({ id: 61977, type: "boardgamefamily" }).then(dtos => {
    console.log('\x1b[33m%s\x1b[0m', 'client.family { id: 61977, type: "boardgamefamily" }')

    const dto = dtos[0]
    console.assert(dtos.length === 1, '\x1b[31m%s\x1b[0m', 'result dtos array must count 1')
    console.assert(dto.id === 61977)
    console.assert(dto.things, '\x1b[31m%s\x1b[0m', `things not deserialized`)
    console.assert(dto.description, '\x1b[31m%s\x1b[0m', `description not deserialized`)
    console.assert(dto.image, '\x1b[31m%s\x1b[0m', `image not deserialized`)
    console.assert(dto.name, '\x1b[31m%s\x1b[0m', `name not deserialized`)
    console.assert(dto.thumbnail, '\x1b[31m%s\x1b[0m', `thumbnail not deserialized`)
    console.assert(dto.type, '\x1b[31m%s\x1b[0m', `type not deserialized`)

})